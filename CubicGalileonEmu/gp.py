# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_gp.ipynb.

# %% auto 0
__all__ = ['MODEL_DIR', 'MODEL_FILE', 'MODEL_DIR_PATH', 'do_gp_train', 'gp_load']

# %% ../nbs/02_gp.ipynb 3
from sepia.SepiaModel import SepiaModel
from sepia.SepiaData import SepiaData
from sepia.SepiaPredict import SepiaEmulatorPrediction
from sepia.SepiaPredict import SepiaFullPrediction
from sepia.SepiaPredict import SepiaXvalEmulatorPrediction
from sepia.SepiaSharedThetaModels import SepiaSharedThetaModels
from PIL import Image
import sepia.SepiaPlot as SepiaPlot
import pkg_resources
import os

# %% ../nbs/02_gp.ipynb 4
MODEL_DIR = "model/"
MODEL_FILE = pkg_resources.resource_stream("CubicGalileonEmu", MODEL_DIR + "README.txt").name
MODEL_DIR_PATH = os.path.dirname(MODEL_FILE)

# %% ../nbs/02_gp.ipynb 5
def do_gp_train(sepia_model:SepiaModel=None, # Input data in SEPIA format, after PCA
                model_file:str=MODEL_DIR_PATH + 'multivariate_model', #pickle file path
               ) -> SepiaModel: # sepia.SepiaModel.SepiaModel after GP
    
    sepia_model.tune_step_sizes(50, 20, update_vals=True)
    sepia_model.do_mcmc(1000)
    sepia_model.save_model_info(model_file)
    return sepia_model

# %% ../nbs/02_gp.ipynb 7
def gp_load(sepia_model:SepiaModel=None, # Input data in SEPIA format (Pre-PCA is fine? -- CHECK)
            model_file:str=MODEL_DIR_PATH + 'multivariate_model', #pickle file path
    ) -> SepiaModel: # sepia.SepiaModel.SepiaModel
    
    # make sure this model was instantiated with the same input data as the model corresonding to this saved model info.

    # if os.path.isfile(model_file+'.pkl'):
    try:
        sepia_model.restore_model_info(model_file)
        return sepia_model
        
    except FileNotFoundError as e:
        print(e.errno)    
